name: Build and Test Static Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test Website
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate HTML
      run: |
        # Install HTML validator
        sudo apt-get update
        sudo apt-get install -y tidy
        
        # Validate HTML files
        find . -name "*.html" -exec tidy -q -e {} \; || echo "HTML validation completed with warnings"
    
    - name: Check file structure
      run: |
        # Verify required files exist
        if [ ! -f "index.html" ]; then
          echo "Error: index.html not found"
          exit 1
        fi
        
        if [ ! -f "CNAME" ]; then
          echo "Error: CNAME file not found"
          exit 1
        fi
        
        echo "‚úÖ Required files found"
        echo "‚úÖ Static website structure validated"

  accessibility-test:
    runs-on: ubuntu-latest
    name: Accessibility Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for testing tools
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli
        npm install -g pa11y
    
    - name: Start simple HTTP server
      run: |
        python3 -m http.server 8080 &
        sleep 5
    
    - name: Run accessibility tests
      run: |
        # Test with axe-core
        axe http://localhost:8080 --exit || echo "Accessibility tests completed with issues"
        
        # Test with pa11y
        pa11y http://localhost:8080 || echo "Pa11y tests completed with issues"

  performance-test:
    runs-on: ubuntu-latest
    name: Performance Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for Lighthouse
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Lighthouse
      run: npm install -g lighthouse
    
    - name: Start simple HTTP server
      run: |
        python3 -m http.server 8080 &
        sleep 5
    
    - name: Run Lighthouse tests
      run: |
        lighthouse http://localhost:8080 --output=json --output-path=./lighthouse-results.json --chrome-flags="--headless --no-sandbox" || echo "Lighthouse tests completed"
        
        # Show basic results
        if [ -f "./lighthouse-results.json" ]; then
          cat ./lighthouse-results.json | grep -o '"score":[0-9.]*' | head -5 || echo "Lighthouse results processed"
        fi

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run basic security checks
      run: |
        # Check for common security issues in HTML
        echo "üîç Checking for security issues..."
        
        # Check for potentially unsafe HTML elements
        if grep -r "javascript:" . --include="*.html"; then
          echo "‚ö†Ô∏è Found javascript: URLs - review for XSS"
        fi
        
        # Check for external script sources
        if grep -r "<script src=" . --include="*.html"; then
          echo "‚ÑπÔ∏è Found external scripts - ensure they're from trusted sources"
        fi
        
        # Check for inline event handlers
        if grep -r "onclick\|onload\|onerror" . --include="*.html"; then
          echo "‚ÑπÔ∏è Found inline event handlers - consider moving to external JS"
        fi
        
        echo "‚úÖ Basic security scan completed"

  link-check:
    runs-on: ubuntu-latest
    name: Check Links
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js for link checking
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install link checker
      run: npm install -g markdown-link-check
    
    - name: Check links in HTML files
      run: |
        echo "üîó Checking links in HTML files..."
        
        # Extract and check URLs from HTML files
        find . -name "*.html" -exec grep -o 'href="[^"]*"' {} \; | sed 's/href="//g' | sed 's/"//g' | sort | uniq > urls.txt
        
        # Check GitHub URLs specifically
        grep "github.com" urls.txt | head -10 | while read url; do
          echo "Checking: $url"
          curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "200\|301\|302" && echo "‚úÖ $url" || echo "‚ùå $url"
        done
        
        echo "‚úÖ Link checking completed"

  validate-seo:
    runs-on: ubuntu-latest
    name: Validate SEO
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check SEO elements
      run: |
        echo "üîç Validating SEO elements..."
        
        # Check for required meta tags
        if grep -q "<title>" index.html; then
          echo "‚úÖ Title tag found"
        else
          echo "‚ùå Title tag missing"
        fi
        
        if grep -q 'name="description"' index.html; then
          echo "‚úÖ Meta description found"
        else
          echo "‚ùå Meta description missing"
        fi
        
        if grep -q 'property="og:' index.html; then
          echo "‚úÖ Open Graph tags found"
        else
          echo "‚ùå Open Graph tags missing"
        fi
        
        # Check for sitemap
        if [ -f "sitemap.xml" ]; then
          echo "‚úÖ Sitemap found"
        else
          echo "‚ùå Sitemap missing"
        fi
        
        # Check for robots.txt
        if [ -f "robots.txt" ]; then
          echo "‚úÖ Robots.txt found"
        else
          echo "‚ùå Robots.txt missing"
        fi
        
        echo "‚úÖ SEO validation completed"
