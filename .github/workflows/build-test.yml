name: Build and Test Static Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
name: Build and Test Docusaurus Website

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Docusaurus website
      run: npm run build
    
    - name: Validate generated HTML
      run: |
        # Install HTML validator
        sudo apt-get update
        sudo apt-get install -y tidy
        
        # Validate main HTML files in build directory
        if [ -d "build" ]; then
          echo "üîç Validating generated HTML files..."
          find build -name "*.html" -exec tidy -q -e {} \; || echo "HTML validation completed with warnings"
        else
          echo "‚ùå Build directory not found"
          exit 1
        fi
    
    - name: Check Docusaurus structure
      run: |
        # Verify Docusaurus build output
        if [ ! -f "build/index.html" ]; then
          echo "‚ùå Error: build/index.html not found after Docusaurus build"
          exit 1
        fi
        
        if [ ! -f "static/CNAME" ]; then
          echo "‚ùå Error: static/CNAME file not found"
          exit 1
        fi
        
        if [ ! -f "build/CNAME" ]; then
          echo "‚ùå Error: CNAME not copied to build directory"
          exit 1
        fi
        
        # Check if essential Docusaurus files exist
        if [ ! -f "docusaurus.config.ts" ]; then
          echo "‚ùå Error: docusaurus.config.ts not found"
          exit 1
        fi
        
        if [ ! -f "package.json" ]; then
          echo "‚ùå Error: package.json not found"
          exit 1
        fi
        
        echo "‚úÖ Required Docusaurus files found"
        echo "‚úÖ Docusaurus website structure validated"
        echo "‚úÖ Build output contains index.html and CNAME"

  accessibility-test:
    runs-on: ubuntu-latest
    name: accessibility-test
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
    
    - name: Install accessibility testing tools
      run: |
        npm install -g @axe-core/cli
        npm install -g pa11y
    
    - name: Start HTTP server with built site
      run: |
        cd build
        python3 -m http.server 8080 &
        sleep 5
        cd ..
    
    - name: Run accessibility tests
      run: |
        # Test with axe-core
        axe http://localhost:8080 --exit || echo "Accessibility tests completed with issues"
        
        # Test with pa11y  
        pa11y http://localhost:8080 || echo "Pa11y tests completed with issues"

  performance-test:
    runs-on: ubuntu-latest
    name: performance-test
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
    
    - name: Install Lighthouse
      run: npm install -g lighthouse
    
    - name: Start HTTP server with built site
      run: |
        cd build  
        python3 -m http.server 8080 &
        sleep 5
        cd ..
    
    - name: Run Lighthouse tests
      run: |
        lighthouse http://localhost:8080 --output=json --output-path=./lighthouse-results.json --chrome-flags="--headless --no-sandbox" || echo "Lighthouse tests completed"
        
        # Show basic results
        if [ -f "./lighthouse-results.json" ]; then
          cat ./lighthouse-results.json | grep -o '"score":[0-9.]*' | head -5 || echo "Lighthouse results processed"
        fi

  security-scan:
    runs-on: ubuntu-latest
    name: security-scan
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
    
    - name: Run security checks on built site
      run: |
        # Check for common security issues in built HTML
        echo "üîç Checking for security issues in built site..."
        
        # Check for potentially unsafe HTML elements in build directory
        if grep -r "javascript:" build/ --include="*.html"; then
          echo "‚ö†Ô∏è Found javascript: URLs - review for XSS"
        fi
        
        # Check for external script sources
        if grep -r "<script src=" build/ --include="*.html"; then
          echo "‚ÑπÔ∏è Found external scripts - ensure they're from trusted sources"
        fi
        
        # Check for inline event handlers
        if grep -r "onclick\|onload\|onerror" build/ --include="*.html"; then
          echo "‚ÑπÔ∏è Found inline event handlers - consider moving to external JS"
        fi
        
        # Check Docusaurus config for security
        echo "üîç Checking Docusaurus configuration..."
        if [ -f "docusaurus.config.ts" ]; then
          echo "‚úÖ Docusaurus config found"
        fi
        
        echo "‚úÖ Basic security scan completed"

  link-check:
    runs-on: ubuntu-latest
    name: link-check
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
        cache: 'npm'
    
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
    
    - name: Install link checker
      run: npm install -g markdown-link-check
    
    - name: Check links in built HTML files
      run: |
        echo "üîó Checking links in built HTML files..."
        
        # Extract and check URLs from built HTML files
        find build -name "*.html" -exec grep -o 'href="[^"]*"' {} \; | sed 's/href="//g' | sed 's/"//g' | sort | uniq > urls.txt
        
        # Check internal links
        echo "Checking internal links..."
        grep -v "http" urls.txt | head -10 | while read url; do
          if [ -n "$url" ] && [ "$url" != "#" ]; then
            echo "Internal link: $url"
          fi
        done
        
        # Check external GitHub URLs specifically
        echo "Checking external GitHub links..."
        grep "github.com" urls.txt | head -5 | while read url; do
          if [ -n "$url" ]; then
            echo "Checking: $url"
            curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "200\|301\|302" && echo "‚úÖ $url" || echo "‚ùå $url"
          fi
        done
        
        echo "‚úÖ Link checking completed"
